{"version":3,"sources":["google-analytics-universal-tracker.js","govuk-tracker.js","analytics.js","form-error-tracker.js"],"names":["global","sendToGa","ga","apply","arguments","$","jQuery","GOVUK","GoogleAnalyticsUniversalTracker","trackingId","fieldsObject","cookieDomain","load","i","s","o","g","r","a","m","q","push","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","document","prototype","trackPageview","path","title","options","pageviewObject","page","extend","isEmptyObject","trackEvent","category","action","value","evt","hitType","eventCategory","eventAction","label","eventLabel","parseInt","isNaN","eventValue","nonInteraction","trackSocial","network","target","trackingOptions","socialNetwork","socialAction","socialTarget","addLinkedTrackerDomain","trackerId","name","domain","setDimension","index","String","window","GOVUKTracker","gifUrl","this","dimensions","sendToTracker","toString","payloadParams","type","payload","data","eventType","referrer","gaClientId","windowWidth","innerWidth","windowHeight","innerHeight","screenWidth","screen","width","screenHeight","height","colorDepth","performance","navigationType","navigation","redirectCount","k","timing","v","sendData","params","url","param","get","ready","tracker","bind","Analytics","config","trackers","universalId","govukTrackerUrl","sendToTrackers","method","args","length","fn","trackShare","location","pathname","analyticsPlugins","formErrorTracker","getQuestionText","error","questionText","legendText","errorID","attr","$element","elementID","is","prop","nodeName","getElementById","toLowerCase","trim","text","closest","find","errors","$error","errorText","transport","optionsGlobal","analytics","trackError","GA_TRACKING_ID"],"mappings":"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","file":"custom-analytics.js","sourcesContent":[";(function (global) {\n  'use strict'\n\n  var $ = global.jQuery\n  var GOVUK = global.GOVUK || {}\n\n  var GoogleAnalyticsUniversalTracker = function (trackingId, fieldsObject) {\n    function configureProfile () {\n      // https://developers.google.com/analytics/devguides/collection/analyticsjs/command-queue-reference#create\n      sendToGa('create', trackingId, fieldsObject)\n    }\n\n    function anonymizeIp () {\n      // https://developers.google.com/analytics/devguides/collection/analyticsjs/advanced#anonymizeip\n      sendToGa('set', 'anonymizeIp', true)\n    }\n\n    function disableAdTracking () {\n      // https://support.google.com/analytics/answer/2444872?hl=en\n      sendToGa('set', 'displayFeaturesTask', null)\n    }\n\n    // Support legacy cookieDomain param\n    if (typeof fieldsObject === 'string') {\n      fieldsObject = { cookieDomain: fieldsObject }\n    }\n\n    configureProfile()\n    anonymizeIp()\n    disableAdTracking()\n  }\n\n  GoogleAnalyticsUniversalTracker.load = function () {\n    /* eslint-disable */\n    (function (i, s, o, g, r, a, m) { i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {\n      (i[r].q = i[r].q || []).push(arguments) }, i[r].l = 1 * new Date(); a = s.createElement(o),\n                             m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)\n    })(global, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga')\n    /* eslint-enable */\n  }\n\n  // https://developers.google.com/analytics/devguides/collection/analyticsjs/pages\n  GoogleAnalyticsUniversalTracker.prototype.trackPageview = function (path, title, options) {\n    var pageviewObject\n\n    if (typeof path === 'string') {\n      pageviewObject = { page: path }\n    }\n\n    if (typeof title === 'string') {\n      pageviewObject = pageviewObject || {}\n      pageviewObject.title = title\n    }\n\n    // Set an options object for the pageview (e.g. transport, sessionControl)\n    // https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#transport\n    if (typeof options === 'object') {\n      pageviewObject = $.extend(pageviewObject || {}, options)\n    }\n\n    if (!$.isEmptyObject(pageviewObject)) {\n      sendToGa('send', 'pageview', pageviewObject)\n    } else {\n      sendToGa('send', 'pageview')\n    }\n  }\n\n  // https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n  GoogleAnalyticsUniversalTracker.prototype.trackEvent = function (category, action, options) {\n    options = options || {}\n    var value\n    var evt = {\n      hitType: 'event',\n      eventCategory: category,\n      eventAction: action\n    }\n\n    // Label is optional\n    if (typeof options.label === 'string') {\n      evt.eventLabel = options.label\n      delete options.label\n    }\n\n    // Value is optional, but when used must be an\n    // integer, otherwise the event will be invalid\n    // and not logged\n    if (options.value || options.value === 0) {\n      value = parseInt(options.value, 10)\n      if (typeof value === 'number' && !isNaN(value)) {\n        options.eventValue = value\n      }\n      delete options.value\n    }\n\n    // Prevents an event from affecting bounce rate\n    // https://developers.google.com/analytics/devguides/collection/analyticsjs/events#implementation\n    if (options.nonInteraction) {\n      options.nonInteraction = 1\n    }\n\n    if (typeof options === 'object') {\n      $.extend(evt, options)\n    }\n\n    sendToGa('send', evt)\n  }\n\n  /*\n    https://developers.google.com/analytics/devguides/collection/analyticsjs/social-interactions\n    network – The network on which the action occurs (e.g. Facebook, Twitter)\n    action – The type of action that happens (e.g. Like, Send, Tweet)\n    target – Specifies the target of a social interaction.\n             This value is typically a URL but can be any text.\n  */\n  GoogleAnalyticsUniversalTracker.prototype.trackSocial = function (network, action, target, options) {\n    var trackingOptions = {\n      'hitType': 'social',\n      'socialNetwork': network,\n      'socialAction': action,\n      'socialTarget': target\n    }\n\n    $.extend(trackingOptions, options)\n\n    sendToGa('send', trackingOptions)\n  }\n\n  /*\n   https://developers.google.com/analytics/devguides/collection/analyticsjs/cross-domain\n   trackerId - the UA account code to track the domain against\n   name      - name for the tracker\n   domain    - the domain to track\n  */\n  GoogleAnalyticsUniversalTracker.prototype.addLinkedTrackerDomain = function (trackerId, name, domain) {\n    sendToGa('create',\n             trackerId,\n             'auto',\n             {'name': name})\n    // Load the plugin.\n    sendToGa('require', 'linker')\n    sendToGa(name + '.require', 'linker')\n\n    // Define which domains to autoLink.\n    sendToGa('linker:autoLink', [domain])\n    sendToGa(name + '.linker:autoLink', [domain])\n\n    sendToGa(name + '.set', 'anonymizeIp', true)\n    sendToGa(name + '.set', 'displayFeaturesTask', null)\n    sendToGa(name + '.send', 'pageview')\n  }\n\n  // https://developers.google.com/analytics/devguides/collection/analyticsjs/custom-dims-mets\n  GoogleAnalyticsUniversalTracker.prototype.setDimension = function (index, value) {\n    sendToGa('set', 'dimension' + index, String(value))\n  }\n\n  function sendToGa () {\n    if (typeof global.ga === 'function') {\n      global.ga.apply(global, arguments)\n    }\n  }\n\n  GOVUK.GoogleAnalyticsUniversalTracker = GoogleAnalyticsUniversalTracker\n\n  global.GOVUK = GOVUK\n})(window)\n",";(function (global) {\n  'use strict'\n\n  var $ = global.jQuery\n  var GOVUK = global.GOVUK || {}\n\n  var GOVUKTracker = function (gifUrl) {\n    this.gifUrl = gifUrl\n    this.dimensions = []\n  }\n\n  GOVUKTracker.load = function () {}\n\n  GOVUKTracker.prototype.trackPageview = function (path, title, options) {\n    var pageviewObject\n\n    if (typeof path === 'string') {\n      pageviewObject = { page: path }\n    }\n\n    if (typeof title === 'string') {\n      pageviewObject = pageviewObject || {}\n      pageviewObject.title = title\n    }\n\n    // Set an options object for the pageview (e.g. transport, sessionControl)\n    // https://developers.google.com/analytics/devguides/collection/analyticsjs/field-reference#transport\n    if (typeof options === 'object') {\n      pageviewObject = $.extend(pageviewObject || {}, options)\n    }\n\n    if (!$.isEmptyObject(pageviewObject)) {\n      this.sendToTracker('pageview', pageviewObject)\n    } else {\n      this.sendToTracker('pageview')\n    }\n  }\n\n  // https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n  GOVUKTracker.prototype.trackEvent = function (category, action, options) {\n    options = options || {}\n    var evt = {\n      eventCategory: category,\n      eventAction: action\n    }\n\n    if (options.label) {\n      evt.eventLabel = options.label\n      delete options.label\n    }\n\n    if (options.value) {\n      evt.eventValue = options.value.toString()\n      delete options.value\n    }\n\n    if (typeof options === 'object') {\n      $.extend(evt, options)\n    }\n\n    this.sendToTracker('event', evt)\n  }\n\n  GOVUKTracker.prototype.trackSocial = function (network, action, target, options) {\n    var trackingOptions = {\n      'socialNetwork': network,\n      'socialAction': action,\n      'socialTarget': target\n    }\n\n    $.extend(trackingOptions, options)\n\n    this.sendToTracker('social', trackingOptions)\n  }\n\n  GOVUKTracker.prototype.addLinkedTrackerDomain = function () { /* noop */ }\n\n  GOVUKTracker.prototype.setDimension = function (index, value) {\n    this.dimensions['dimension' + index] = value\n  }\n\n  GOVUKTracker.prototype.payloadParams = function (type, payload) {\n    var data = $.extend({},\n      payload,\n      this.dimensions,\n      {\n        eventType: type,\n        referrer: global.document.referrer,\n        gaClientId: this.gaClientId,\n        windowWidth: global.innerWidth,\n        windowHeight: global.innerHeight,\n        screenWidth: global.screen.width,\n        screenHeight: global.screen.height,\n        colorDepth: global.screen.colorDepth\n      }\n    )\n\n    if (global.performance) {\n      data.navigationType = global.performance.navigation.type.toString()\n      data.redirectCount = global.performance.navigation.redirectCount.toString()\n\n      for (var k in global.performance.timing) {\n        var v = global.performance.timing[k]\n        if (typeof v === 'string' || typeof v === 'number') {\n          data['timing_' + k] = v.toString()\n        }\n      }\n    }\n\n    return data\n  }\n\n  GOVUKTracker.prototype.sendData = function (params) {\n    var url = this.gifUrl + '?' + $.param(params)\n    $.get(url)\n  }\n\n  GOVUKTracker.prototype.sendToTracker = function (type, payload) {\n    $(global.document).ready(function () {\n      if (global.ga) {\n        global.ga(function (tracker) {\n          this.gaClientId = tracker.get('clientId')\n          this.sendData(this.payloadParams(type, payload))\n        }.bind(this))\n      } else {\n        this.sendData(this.payloadParams(type, payload))\n      }\n    }.bind(this))\n  }\n\n  GOVUK.GOVUKTracker = GOVUKTracker\n\n  global.GOVUK = GOVUK\n})(window)\n",";(function(global) {\n  \"use strict\";\n\n  // Load Google Analytics libraries\n  GOVUK.Analytics.load();\n\n  // Use document.domain in dev, preview and staging so that tracking works\n  // Otherwise explicitly set the domain as www.gov.uk (and not gov.uk).\n  var cookieDomain = (document.domain === 'powerofattorneyrefund.service.justice.gov.uk') ? '.powerofattorneyrefund.service.justice.gov.uk' : document.domain;\n\n  // Configure profiles and make interface public\n  // for custom dimensions, virtual pageviews and events\n  GOVUK.analytics = new GOVUK.Analytics({\n    universalId: global.GA_TRACKING_ID  || '',\n    cookieDomain: cookieDomain\n  });\n\n  // Set custom dimensions before tracking pageviews\n  // GOVUK.analytics.setDimension(…)\n\n  // Activate any event plugins eg. print intent, error tracking\n  GOVUK.analyticsPlugins.formErrorTracker();\n  \n  // Track initial pageview\n  GOVUK.analytics.trackPageview();\n})(window);",";(function (global) {\n  'use strict'\n\n  var $ = global.jQuery\n  var GOVUK = global.GOVUK || {}\n\n  GOVUK.analyticsPlugins = GOVUK.analyticsPlugins || {}\n  GOVUK.analyticsPlugins.formErrorTracker = function () {\n\n    var errorSummarySelector = '.error-summary-list a'\n\n    var errors = $('.error-summary-list li a')\n    for (var i = 0; i < errors.length; i++) {\n      trackError(errors[i])  \n    }\n\n    function trackError(error) {\n      var $error = $(error)\n      var errorText = $.trim($error.text())\n      var errorID = $error.attr('href')\n      var questionText = getQuestionText(error)\n\n      var actionLabel = errorID + ' - ' + errorText\n\n      var options = {\n        transport: 'beacon',\n        label: actionLabel\n      }\n\n      window.optionsGlobal = options\n\n      GOVUK.analytics.trackEvent('Error-field', questionText, options)\n    }\n\n    function getQuestionText(error) {\n      var $error = $(error)\n      var errorID = $error.attr('href')\n\n      var $element = $(errorID)\n      var isLegend = $element.is(\"legend\")      \n      var isInput = $element.is(\"input\")\n\n      var elementID = $element.prop('id')\n\n      var nodeName = document.getElementById(elementID).nodeName.toLowerCase()\n      var questionText\n      var legendText\n\n      if (nodeName === 'input') {\n        questionText = $.trim($('label[for=\"' + elementID + '\"] .question-text').text())\n        legendText = $.trim($element.closest('fieldset').find('legend').text())\n        questionText = legendText.length > 0 ? legendText + ': ' + questionText : questionText\n      }\n      else if (nodeName === 'legend') {\n        questionText = $.trim($element.find('.question-text').text())\n      }\n\n      return questionText\n    }\n  }\n\n  global.GOVUK = GOVUK\n})(window)\n"]}