version: 2.1

workflows:
  pr-build-and-test:
    jobs:
      # Cancel running builds unless on master
      - cancel_redundant_builds:
          name: cancel_previous_jobs
          filters: { branches: { ignore: [master] } }

      # Terraform Validation
      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: lint_and_validate_terraform
          account_workspace: development
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: validate_preproduction_terraform
          account_workspace: preproduction
          environment_workspace: preproduction
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: validate_production_terraform
          account_workspace: production
          environment_workspace: production
          filters: { branches: { ignore: [master] } }

      # Development Deploy
      - infrastructure_and_deployment/apply_account_terraform:
          name: dev_account_apply_terraform
          workspace: development
          requires: [cancel_previous_jobs, lint_and_validate_terraform]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/apply_environment_terraform:
          name: dev_environment_apply_terraform
          requires:
            [
              cancel_previous_jobs,
              dev_account_apply_terraform,
            ]
          filters: { branches: { ignore: [master] } }

      - slack_notify_domain:
          name: post_environment_domains
          requires: [dev_environment_apply_terraform]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/destroy_dev_environment:
          name: dev_destroy_environment
          requires: [post_environment_domains]
          filters: { branches: { ignore: [master] } }

  path-to-live:
    jobs:

      # Preproduction Deployment
      - infrastructure_and_deployment/apply_account_terraform:
          name: preprod_account_apply_terraform
          workspace: preproduction
          filters: { branches: { only: [master] } }
      - infrastructure_and_deployment/apply_environment_terraform:
          name: preprod_environment_apply_terraform
          requires:
            [
              preprod_account_apply_terraform
            ]
          workspace: preproduction
          filters: { branches: { only: [master] } }

      # Production Deployment
      - infrastructure_and_deployment/apply_account_terraform:
          name: prod_account_apply_terraform
          workspace: production
          requires: [preprod_environment_apply_terraform]
          filters: { branches: { only: [master] } }

      - infrastructure_and_deployment/apply_environment_terraform:
          name: prod_environment_apply_terraform
          requires: [prod_account_apply_terraform]
          workspace: production
          filters: { branches: { only: [master] } }


      - slack_notify_production_release:
          name: post_production_release_message
          requires:
            [prod_account_apply_terraform, prod_environment_apply_terraform]
          filters: { branches: { only: [master] } }

orbs:
  slack: circleci/slack@3.3.0
  infrastructure_and_deployment:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      install_terraform:
        steps:
          - run:
              name: Install Terraform
              command: |
                export TERRAFORM_VERSION=0.13.6
                export TERRAFORM_SHA256SUM=55f2db00b05675026be9c898bdd3e8230ff0c5c78dd12d743ca38032092abfc9
                echo $TERRAFORM_VERSION
                echo $TERRAFORM_SHA256SUM
                curl https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip > terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                echo "${TERRAFORM_SHA256SUM}  terraform_${TERRAFORM_VERSION}_linux_amd64.zip" > terraform_${TERRAFORM_VERSION}_SHA256SUMS
                sha256sum -c --status terraform_${TERRAFORM_VERSION}_SHA256SUMS
                sudo unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin
                terraform -version
    executors:
      python:
        docker:
        - image: circleci/python
          auth:
            username: $DOCKER_USER
            password: $DOCKER_ACCESS_TOKEN
        resource_class: small
      terraform:
        docker:
         - image: hashicorp/terraform:0.13.6
           auth:
            username: $DOCKER_USER
            password: $DOCKER_ACCESS_TOKEN
        resource_class: small


    jobs:
      #----------------------------------------------------
      # Terraform
      lint_and_validate_terraform:
        parameters:
          account_workspace:
            description: Terraform workspace name
            type: string
          environment_workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        executor: terraform
        steps:
          - checkout
          - run:
              name: terraform lint
              command: terraform fmt -diff -check -recursive
          - run:
              name: Validate Account Terraform
              command: |
                cd ~/project/terraform/account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=$(~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.account_workspace>>) >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform validate
          - run:
              name: Validate Environment Terraform
              command: |
                cd ~/project/terraform/environment
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=$(~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.environment_workspace>>) >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform validate

      apply_account_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the account infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: development
        steps:
          - checkout
          - run:
              name: Apply Account Terraform
              command: |
                cd ~/project/terraform/account
                export TF_WORKSPACE=$(~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.workspace>>) >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform init -lock-timeout=300s
                terraform apply -lock-timeout=300s --auto-approve
      apply_environment_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the account infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - run:
              name: Apply Environment Terraform
              command: |
                cd ~/project/terraform/environment
                terraform init -lock-timeout=300s
                export IMAGE_TAG=$(~/project/pipeline_scripts/set_environment_variables/set_image_tag.sh $CIRCLE_BRANCH $CIRCLE_SHA1) >> $BASH_ENV
                echo $IMAGE_TAG
                export TF_WORKSPACE=$(~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.workspace>>) >> $BASH_ENV
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s -auto-approve -var container_version=${IMAGE_TAG}
          - persist_to_workspace:
              root: /tmp
              paths:
                - environment_pipeline_tasks_config.json
      seed_environment_databases:
        #
        # Puts data into the refunds caseworker database for testing
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - run:
              name: Install python dependencies
              command: |
                pip install -r ~/project/pipeline_scripts/requirements.txt --user
          - run:
              name: Wait for new tasks in services to be running
              command: |
                python ~/project/pipeline_scripts/ecs_monitor.py
          - run:
              name: Run seeding ecs task
              command: |
                python ~/project/pipeline_scripts/ecs_start_seeding_task.py
      run_healthcheck_test:
        #
        # Checks the health check is returning 200
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - run:
              name: Install python dependencies
              command: |
                pip install -r ~/project/pipeline_scripts/requirements.txt --user
          - install_terraform
          - run:
              name: Wait for new tasks in services to be running
              command: |
                python ~/project/pipeline_scripts/ecs_monitor.py
          - run:
              name: Add CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  cd ~/project/terraform/ci_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=$(bash ~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.workspace>>) >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform apply -lock-timeout=300s -auto-approve
                fi
          - run:
              name: Run test
              command: |
                python ~/project/pipeline_scripts/healthcheck_test.py
          - run:
              name: Remove CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  cd ~/project/terraform/ci_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=$(bash ~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.workspace>>) >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
              when: always
      destroy_dev_environment:
        #
        # Destroys a development environment after testing and approval
        # Cannot be run on master branch
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - run:
              name: Destroy Development Environment
              command: |
                if [ "${CIRCLE_BRANCH}" != "master" ]; then
                  cd ~/project/terraform/environment
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=$(~/project/pipeline_scripts/set_environment_variables/set_workspace.sh <<parameters.workspace>>) >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
jobs:
  cancel_redundant_builds:
    docker:
      - image: circleci/python
        auth:
          username: $DOCKER_USER
          password: $DOCKER_ACCESS_TOKEN
    resource_class: small
    steps:
      - checkout
      - run:
          name: Cancel Redundant Builds
          command: |
            python pipeline_scripts/cancel_previous_jobs/cancel_redundant_builds.py \
            --circle_project_username ${CIRCLE_PROJECT_USERNAME} \
            --circle_project_reponame ${CIRCLE_PROJECT_REPONAME} \
            --circle_branch ${CIRCLE_BRANCH} \
            --circle_builds_token ${CIRCLECI_API_KEY} \
            --terms_to_waitfor "dev_account_apply_terraform,dev_environment_apply_terraform"

  slack_notify_domain:
    docker:
      - image: circleci/python
        auth:
          username: $DOCKER_USER
          password: $DOCKER_ACCESS_TOKEN
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Get URLs
          command: |
            ~/project/.circleci/set_slack_env_vars.sh >> $BASH_ENV
      - slack/notify:
          title: "LPA Refunds Development Environment Ready"
          color: "#1cb0ba"
          message: "User: $CIRCLE_USERNAME"
          footer: "${CIRCLE_BRANCH} - Commit Message: $COMMIT_MESSAGE"
  slack_notify_production_release:
    docker:
      - image: circleci/python
        auth:
          username: $DOCKER_USER
          password: $DOCKER_ACCESS_TOKEN
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Get URLs
          command: |
            ~/project/.circleci/set_slack_env_vars.sh >> $BASH_ENV
      - slack/notify:
          title: "LPA Refunds Production Release Successful"
          color: "#1cb0ba"
          mentions: "UAQQ2PY86"
          message: "User: $CIRCLE_USERNAME"
          footer: "${CIRCLE_BRANCH} - Commit Message: $COMMIT_MESSAGE"
          webhook: ${PROD_RELEASE_SLACK_WEBHOOK}
