version: 2.1

workflows:
  pr-build-and-test:
    jobs:
      # Docker Build
      - build_containers_and_push_to_ecr/docker_build_push_web-app:
          name: public_front_docker_build
          ecr_repository_name_prefix: lpa-refunds/public_front
          service_path: public-front
          filters: { branches: { ignore: [master] } }

      - build_containers_and_push_to_ecr/docker_build_push_web-app:
          name: caseworker_front_docker_build
          ecr_repository_name_prefix: lpa-refunds/caseworker_front
          service_path: caseworker-front
          filters: { branches: { ignore: [master] } }

      - build_containers_and_push_to_ecr/docker_build_push_web-app:
          name: caseworker_api_docker_build
          ecr_repository_name_prefix: lpa-refunds/caseworker_api
          service_path: caseworker-api
          build_composer_container: true
          filters: { branches: { ignore: [master] } }

      - build_containers_and_push_to_ecr/docker_build_push_ingestion_seeding:
          name: ingestion_seeding_docker_build
          ecr_repository_name_prefix: lpa-refunds/caseworker_api
          service_path: caseworker-api
          build_composer_container: true
          filters: { branches: { ignore: [master] } }

      # Terraform Validation
      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: lint_and_validate_terraform
          account_workspace: development
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: validate_preproduction_terraform
          account_workspace: preproduction
          environment_workspace: preproduction
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/lint_and_validate_terraform:
          name: validate_production_terraform
          account_workspace: production
          environment_workspace: production
          filters: { branches: { ignore: [master] } }

      # Development Deploy
      - infrastructure_and_deployment/apply_account_terraform:
          name: dev_account_apply_terraform
          workspace: development
          requires: [lint_and_validate_terraform]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/apply_environment_terraform:
          name: dev_environment_apply_terraform
          requires:
            [
              dev_account_apply_terraform,
              public_front_docker_build,
              caseworker_front_docker_build,
              caseworker_api_docker_build,
              ingestion_seeding_docker_build,
            ]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/seed_environment_databases:
          name: dev_seed_environment_databases
          requires: [dev_environment_apply_terraform]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/run_healthcheck_test:
          name: dev_run_healthcheck_test
          requires: [dev_seed_environment_databases]
          filters: { branches: { ignore: [master] } }

      - slack_notify_domain:
          name: post_environment_domains
          requires: [dev_run_healthcheck_test]
          filters: { branches: { ignore: [master] } }

      - hold-for-destruction:
          name: hold_env_for_destruction
          type: approval
          requires: [post_environment_domains]
          filters: { branches: { ignore: [master] } }

      - infrastructure_and_deployment/destroy_dev_environment:
          name: dev_destroy_environment
          requires: [hold_env_for_destruction]
          filters: { branches: { ignore: [master] } }

  path-to-live:
    jobs:
      # Docker Build
      - build_containers_and_push_to_ecr/docker_build_push_web-app:
          name: public_front_docker_build_path_to_live
          ecr_repository_name_prefix: lpa-refunds/public_front
          service_path: public-front
          filters: { branches: { only: [master] } }

      - build_containers_and_push_to_ecr/docker_build_push_web-app:
          name: caseworker_front_docker_build_path_to_live
          ecr_repository_name_prefix: lpa-refunds/caseworker_front
          service_path: caseworker-front
          filters: { branches: { only: [master] } }

      - build_containers_and_push_to_ecr/docker_build_push_web-app:
          name: caseworker_api_docker_build_path_to_live
          ecr_repository_name_prefix: lpa-refunds/caseworker_api
          service_path: caseworker-api
          build_composer_container: true
          filters: { branches: { only: [master] } }

      - build_containers_and_push_to_ecr/docker_build_push_ingestion_seeding:
          name: ingestion_seeding_docker_build_path_to_live
          ecr_repository_name_prefix: lpa-refunds/caseworker_api
          service_path: caseworker-api
          build_composer_container: true
          filters: { branches: { only: [master] } }

      # Preproduction Deployment
      - infrastructure_and_deployment/apply_account_terraform:
          name: preprod_account_apply_terraform
          workspace: preproduction
          filters: { branches: { only: [master] } }
      - infrastructure_and_deployment/apply_environment_terraform:
          name: preprod_environment_apply_terraform
          requires:
            [
              preprod_account_apply_terraform,
              public_front_docker_build_path_to_live,
              caseworker_front_docker_build_path_to_live,
              caseworker_api_docker_build_path_to_live,
              ingestion_seeding_docker_build_path_to_live,
            ]
          workspace: preproduction
          filters: { branches: { only: [master] } }

      - infrastructure_and_deployment/seed_environment_databases:
          name: preprod_seed_environment_databases
          workspace: preproduction
          requires: [preprod_environment_apply_terraform]
          filters: { branches: { only: [master] } }

      - infrastructure_and_deployment/run_healthcheck_test:
          name: preprod_run_healthcheck_test
          workspace: preproduction
          requires: [preprod_seed_environment_databases]
          filters: { branches: { only: [master] } }

      - hold-for-uat:
          name: hold_env_for_uat_preprod
          type: approval
          requires: [preprod_run_healthcheck_test]
          filters: { branches: { only: [master] } }

      # Production Deployment
      - infrastructure_and_deployment/apply_account_terraform:
          name: prod_account_apply_terraform
          workspace: production
          requires: [hold_env_for_uat_preprod]
          filters: { branches: { only: [master] } }

      - infrastructure_and_deployment/apply_environment_terraform:
          name: prod_environment_apply_terraform
          requires: [prod_account_apply_terraform]
          workspace: production
          filters: { branches: { only: [master] } }

      - infrastructure_and_deployment/run_healthcheck_test:
          name: prod_run_healthcheck_test
          workspace: production
          requires: [prod_environment_apply_terraform]
          filters: { branches: { only: [master] } }

      - slack_notify_production_release:
          name: post_production_release_message
          requires:
            [prod_account_apply_terraform, prod_environment_apply_terraform]
          filters: { branches: { only: [master] } }

orbs:
  slack: circleci/slack@3.3.0
  build_containers_and_push_to_ecr:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      ecr_login:
        steps:
          - run:
              name: Login to ECR
              command: |
                temp_role=$(aws sts assume-role --role-arn arn:aws:iam::311462405659:role/opg-refunds-ci --role-session-name ci)
                export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
                export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
                export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
                eval $(aws ecr get-login --no-include-email --region=eu-west-1)
    executors:
      python:
        docker:
          - image: circleci/python
    jobs:
      docker_build_push_web-app:
        executor: python
        parameters:
          ecr_url:
            type: string
            default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
          ecr_repository_name_prefix:
            type: string
            description: The ecr repo name up to _app, _web or _ingestion. These will be added by the job.
          service_path:
            type: string
          build_composer_container:
            type: boolean
            default: false
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - run:
              name: Build caseworker-api-composer container
              command: |
                if [ << parameters.build_composer_container >> = true ]; then
                  docker build -f caseworker-api/docker/composer/Dockerfile --progress=plain --no-cache -t caseworker-api-composer .
                else
                  echo "skipped"
                fi
          - run:
              name: Build web container
              command: |
                docker build -f << parameters.service_path >>/docker/web/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web .
          - run:
              name: Build app container
              command: |
                docker build -f << parameters.service_path >>/docker/app/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app .
          - ecr_login
          - run:
              name: Push web container
              command: |
                export IMAGE_TAG=$(pipeline_scripts/set_environment_variables/set_image_tag.sh $CIRCLE_BRANCH $CIRCLE_SHA1) >> $BASH_ENV
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:${IMAGE_TAG}
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  # If master, push branch tag and latest
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:${IMAGE_TAG} << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:latest
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web
                else
                  # Else, push branch tag only
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_web:${IMAGE_TAG}
                fi
          - run:
              name: Push app container
              command: |
                export IMAGE_TAG=$(pipeline_scripts/set_environment_variables/set_image_tag.sh $CIRCLE_BRANCH $CIRCLE_SHA1) >> $BASH_ENV
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:${IMAGE_TAG}
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  # If master, push branch tag and latest
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:${IMAGE_TAG} << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:latest
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app
                else
                  # Else, push branch tag only
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_app:${IMAGE_TAG}
                fi
      docker_build_push_ingestion_seeding:
        executor: python
        parameters:
          ecr_url:
            type: string
            default: 311462405659.dkr.ecr.eu-west-1.amazonaws.com
          ecr_repository_name_prefix:
            type: string
            description: The ecr repo name up to _app, _web or _ingestion. These will be added by the job.
          service_path:
            type: string
          build_composer_container:
            type: boolean
            default: false
        steps:
          - checkout
          - install_aws_cli
          - setup_remote_docker:
              version: 18.06.0-ce
              docker_layer_caching: false
          - run:
              name: Build caseworker-api-composer container
              command: |
                docker build -f caseworker-api/docker/composer/Dockerfile --progress=plain --no-cache -t caseworker-api-composer .
          - run:
              name: Build caseworker-api-ingestion container
              command: |
                docker build -f << parameters.service_path >>/docker/ingestion/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion .
          - run:
              name: Build caseworker-api-seeding container
              command: |
                docker build -f << parameters.service_path >>/docker/seeding/Dockerfile --progress=plain --no-cache -t << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding .
          - ecr_login
          - run:
              name: Push caseworker-api-ingestion container
              command: |
                export IMAGE_TAG=$(pipeline_scripts/set_environment_variables/set_image_tag.sh $CIRCLE_BRANCH $CIRCLE_SHA1) >> $BASH_ENV
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion:${IMAGE_TAG}
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  # If master, push branch tag and latest
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion:${IMAGE_TAG} << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion:latest
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion
                else
                  # Else, push branch tag only
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_ingestion:${IMAGE_TAG}
                fi
          - run:
              name: Push caseworker-api-seeding container
              command: |
                export IMAGE_TAG=$(pipeline_scripts/set_environment_variables/set_image_tag.sh $CIRCLE_BRANCH $CIRCLE_SHA1) >> $BASH_ENV
                docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding:${IMAGE_TAG}
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  # If master, push branch tag and latest
                  docker tag << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding:${IMAGE_TAG} << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding:latest
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding
                else
                  # Else, push branch tag only
                  docker push << parameters.ecr_url >>/<< parameters.ecr_repository_name_prefix >>_seeding:${IMAGE_TAG}
                fi
  infrastructure_and_deployment:
    commands:
      install_aws_cli:
        steps:
          - run:
              name: Install AWS CLI
              command: sudo pip3 install awscli --upgrade
      install_terraform:
        steps:
          - run:
              name: Install Terraform
              command: |
                export TERRAFORM_VERSION=0.12.20
                export TERRAFORM_SHA256SUM=46bd906f8cb9bbb871905ecb23ae7344af8017d214d735fbb6d6c8e0feb20ff3
                echo $TERRAFORM_VERSION
                echo $TERRAFORM_SHA256SUM
                curl https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip > terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                echo "${TERRAFORM_SHA256SUM}  terraform_${TERRAFORM_VERSION}_linux_amd64.zip" > terraform_${TERRAFORM_VERSION}_SHA256SUMS
                sha256sum -c --status terraform_${TERRAFORM_VERSION}_SHA256SUMS
                sudo unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin
                terraform -version
    executors:
      python:
        docker: [image: circleci/python]
      terraform:
        docker: [image: hashicorp/terraform:0.12.20]
    jobs:
      #----------------------------------------------------
      # Terraform
      lint_and_validate_terraform:
        parameters:
          account_workspace:
            description: Terraform workspace name
            type: string
          environment_workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        executor: terraform
        steps:
          - checkout
          - run:
              name: terraform lint
              command: terraform fmt -diff -check -recursive
          - run:
              name: Validate Account Terraform
              command: |
                cd ~/project/terraform/account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=<<parameters.account_workspace>>
                echo $TF_WORKSPACE
                terraform validate
          - run:
              name: Validate Environment Terraform
              command: |
                ENV_NAME=<<parameters.environment_workspace>>
                export SHORT_HASH=${CIRCLE_SHA1:0:7}
                echo $SHORT_HASH
                cd ~/project/terraform/environment
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=${ENV_NAME:0:13}
                echo $TF_WORKSPACE
                terraform validate

      apply_account_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the account infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: development
        steps:
          - checkout
          - run:
              name: Apply Account Terraform
              command: |
                cd ~/project/terraform/account
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=<<parameters.workspace>>
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s --auto-approve
      apply_environment_terraform:
        #
        # Apply the shared terraform configuration. This:
        #   - Updates the account infrastructure;
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - run:
              name: Apply Environment Terraform
              command: |
                ENV_NAME=<<parameters.workspace>>
                export SHORT_HASH=${CIRCLE_SHA1:0:7}
                echo $SHORT_HASH
                cd ~/project/terraform/environment
                terraform init -lock-timeout=300s
                export TF_WORKSPACE=${ENV_NAME:0:13}
                echo $TF_WORKSPACE
                terraform apply -lock-timeout=300s -auto-approve -var container_version=${IMAGE_TAG}
          - persist_to_workspace:
              root: /tmp
              paths:
                - environment_pipeline_tasks_config.json
      seed_environment_databases:
        #
        # Puts data into the refunds caseworker database for testing
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - run:
              name: Install python dependencies
              command: |
                pip install -r ~/project/pipeline_scripts/requirements.txt --user
          - install_terraform
          - run:
              name: Wait for new tasks in services to be running
              command: |
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                python ~/project/pipeline_scripts/ecs_monitor.py
          - run:
              name: Run seeding ecs task
              command: |
                python ~/project/pipeline_scripts/ecs_start_seeding_task.py
      run_healthcheck_test:
        #
        # Checks the health check is returning 200
        #
        executor: python
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - attach_workspace:
              at: /tmp
          - run:
              name: Install python dependencies
              command: |
                pip install -r ~/project/pipeline_scripts/requirements.txt --user
          - install_terraform
          - run:
              name: Wait for new tasks in services to be running
              command: |
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                python ~/project/pipeline_scripts/ecs_monitor.py
          - run:
              name: Add CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  ENV_NAME=<<parameters.workspace>>
                  cd ~/project/terraform/ci_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform apply -lock-timeout=300s -auto-approve
                fi
          - run:
              name: Run test
              command: |
                python ~/project/pipeline_scripts/healthcheck_test.py
          - run:
              name: Remove CircleCI ingress to environment
              command: |
                if [ <<parameters.workspace>> != "production" ]; then
                  ENV_NAME=<<parameters.workspace>>
                  cd ~/project/terraform/ci_ingress
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
              when: always
      destroy_dev_environment:
        #
        # Destroys a development environment after testing and approval
        # Cannot be run on master branch
        #
        executor: terraform
        parameters:
          workspace:
            description: Terraform workspace name
            type: string
            default: "${CIRCLE_PULL_REQUEST##*/}-${CIRCLE_BRANCH}"
        steps:
          - checkout
          - run:
              name: Destroy Development Environment
              command: |
                ENV_NAME=<<parameters.workspace>>
                export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                echo $TF_WORKSPACE
                if [ "${CIRCLE_BRANCH}" != "master" ]; then
                  cd ~/project/terraform/environment
                  terraform init -lock-timeout=300s
                  export TF_WORKSPACE=${ENV_NAME:0:13} >> $BASH_ENV
                  echo $TF_WORKSPACE
                  terraform destroy -lock-timeout=300s -auto-approve
                fi
jobs:
  slack_notify_domain:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Get URLs
          command: |
            ~/project/.circleci/set_slack_env_vars.sh >> $BASH_ENV
      - slack/notify:
          title: "LPA Refunds Development Environment Ready"
          color: "#1cb0ba"
          message: "User: $CIRCLE_USERNAME \nfront url: https://$FRONT_DOMAIN/start \ncaseworker url: https://$CASEWORKER_DOMAIN \npublic-facing urls: \nhttps://$CLAIM_SERVICE_GOV_UK/start \nhttps://$CASEWORKER_REFUNDS_OPG_DIGITAL"
          footer: "${CIRCLE_BRANCH} - Commit Message: $COMMIT_MESSAGE"
  slack_notify_production_release:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Get URLs
          command: |
            ~/project/.circleci/set_slack_env_vars.sh >> $BASH_ENV
      - slack/notify:
          title: "LPA Refunds Production Release Successful"
          color: "#1cb0ba"
          mentions: "UAQQ2PY86"
          message: "User: $CIRCLE_USERNAME \nfront url: https://$FRONT_DOMAIN/start \ncaseworker url: https://$CASEWORKER_DOMAIN"
          footer: "${CIRCLE_BRANCH} - Commit Message: $COMMIT_MESSAGE"
          webhook: ${PROD_RELEASE_SLACK_WEBHOOK}
